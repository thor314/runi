use std::collections::HashMap;
use lazy_static::lazy_static;

lazy_static! {
    static ref SUPERSCRIPT: HashMap<char, char> = {
        let mut m = HashMap::new();
        m.insert('a', 'ᵃ');
        m.insert('b', 'ᵇ');
        m.insert('c', 'ᶜ');
        m.insert('d', 'ᵈ');
        m.insert('e', 'ᵉ');
        m.insert('f', 'ᶠ');
        m.insert('g', 'ᵍ');
        m.insert('h', 'ʰ');
        m.insert('i', 'ⁱ');
        m.insert('j', 'ʲ');
        m.insert('k', 'ᵏ');
        m.insert('l', 'ˡ');
        m.insert('m', 'ᵐ');
        m.insert('n', 'ⁿ');
        m.insert('o', 'ᵒ');
        m.insert('p', 'ᵖ');
        m.insert('q', 'q');
        m.insert('r', 'ʳ');
        m.insert('s', 'ˢ');
        m.insert('t', 'ᵗ');
        m.insert('u', 'ᵘ');
        m.insert('v', 'ᵛ');
        m.insert('w', 'ʷ');
        m.insert('x', 'ˣ');
        m.insert('y', 'ʸ');
        m.insert('z', 'ᶻ');
        m.insert('A', 'ᴬ');
        m.insert('B', 'ᴮ');
        m.insert('C', 'ᶜ');
        m.insert('D', 'ᴰ');
        m.insert('E', 'ᴱ');
        m.insert('F', 'ᶠ');
        m.insert('G', 'ᴳ');
        m.insert('H', 'ᴴ');
        m.insert('I', 'ᴵ');
        m.insert('J', 'ᴶ');
        m.insert('K', 'ᴷ');
        m.insert('L', 'ᴸ');
        m.insert('M', 'ᴹ');
        m.insert('N', 'ᴺ');
        m.insert('O', 'ᴼ');
        m.insert('P', 'ᴾ');
        m.insert('Q', 'Q');
        m.insert('R', 'ᴿ');
        m.insert('S', 'ˢ');
        m.insert('T', 'ᵀ');
        m.insert('U', 'ᵁ');
        m.insert('V', 'ⱽ');
        m.insert('W', 'ᵂ');
        m.insert('X', 'ˣ');
        m.insert('Y', 'ʸ');
        m.insert('Z', 'ᶻ');
        m.insert('0', '⁰');
        m.insert('1', '¹');
        m.insert('2', '²');
        m.insert('3', '³');
        m.insert('4', '⁴');
        m.insert('5', '⁵');
        m.insert('6', '⁶');
        m.insert('7', '⁷');
        m.insert('8', '⁸');
        m.insert('9', '⁹');
        m
    };

    static ref SUBSCRIPT: HashMap<char, char> = {
        let mut m = HashMap::new();
        m.insert('a', 'ₐ');
        m.insert('b', 'b');
        m.insert('c', 'c');
        m.insert('d', 'd');
        m.insert('e', 'ₑ');
        m.insert('f', 'f');
        m.insert('g', 'g');
        m.insert('h', 'ₕ');
        m.insert('i', 'ᵢ');
        m.insert('j', 'ⱼ');
        m.insert('k', 'ₖ');
        m.insert('l', 'ₗ');
        m.insert('m', 'ₘ');
        m.insert('n', 'ₙ');
        m.insert('o', 'ₒ');
        m.insert('p', 'ₚ');
        m.insert('q', 'q');
        m.insert('r', 'ᵣ');
        m.insert('s', 'ₛ');
        m.insert('t', 'ₜ');
        m.insert('u', 'ᵤ');
        m.insert('v', 'ᵥ');
        m.insert('w', 'w');
        m.insert('x', 'ₓ');
        m.insert('y', 'y');
        m.insert('z', 'z');
        m.insert('A', 'ₐ');
        m.insert('B', 'B');
        m.insert('C', 'C');
        m.insert('D', 'D');
        m.insert('E', 'ₑ');
        m.insert('F', 'F');
        m.insert('G', 'G');
        m.insert('H', 'ₕ');
        m.insert('I', 'ᵢ');
        m.insert('J', 'ⱼ');
        m.insert('K', 'ₖ');
        m.insert('L', 'ₗ');
        m.insert('M', 'ₘ');
        m.insert('N', 'ₙ');
        m.insert('O', 'ₒ');
        m.insert('P', 'ₚ');
        m.insert('Q', 'Q');
        m.insert('R', 'ᵣ');
        m.insert('S', 'ₛ');
        m.insert('T', 'ₜ');
        m.insert('U', 'ᵤ');
        m.insert('V', 'ᵥ');
        m.insert('W', 'W');
        m.insert('X', 'ₓ');
        m.insert('Y', 'Y');
        m.insert('Z', 'Z');
        m.insert('0', '₀');
        m.insert('1', '₁');
        m.insert('2', '₂');
        m.insert('3', '₃');
        m.insert('4', '₄');
        m.insert('5', '₅');
        m.insert('6', '₆');
        m.insert('7', '₇');
        m.insert('8', '₈');
        m.insert('9', '₉');
        m
  };
}